name: Release Note on PR Merge

on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      run_name:
        description: "Enter a run name for this run"
        required: true

run-name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.run_name || github.event.pull_request.title }}

jobs:
  release-note:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      JIRA_API_EMAIL: ${{ secrets.JIRA_API_EMAIL }}
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      JIRA_BASE_URL: https://buyandship.atlassian.net

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Format release note
        id: format_note
        run: |
          # Get commit hash - for manual runs use current SHA
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            HASH="${{ github.sha }}"
          else
            HASH="${{ github.event.pull_request.merge_commit_sha }}"
          fi

          DATE=$(date "+%Y/%m/%d %H:%M")

          # Get title - for manual runs use input, for PR use PR title
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TITLE="${{ github.event.inputs.run_name }}"
          else
            TITLE="${{ github.event.pull_request.title }}"
          fi

          echo "Processing title: $TITLE"

          # Extract BC tickets from title and PR description
          TITLE_TICKETS=$(echo "$TITLE" | grep -oE 'BC-[0-9]+' || true)

          # For PR merges, also check PR description for "Release notes:" section
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_BODY="${{ github.event.pull_request.body }}"
            # Extract content after "Release notes:" (case insensitive)
            RELEASE_NOTES_LINE=$(echo "$PR_BODY" | grep -i "release notes:" || true)
            DESC_TICKETS=$(echo "$RELEASE_NOTES_LINE" | grep -oE 'BC-[0-9]+' || true)

            if [ -n "$DESC_TICKETS" ]; then
              # Use tickets from PR description if found
              TICKETS="$DESC_TICKETS"
              echo "Using tickets from PR description: $TICKETS"
            else
              # Fallback to title tickets
              TICKETS="$TITLE_TICKETS"
              echo "No release notes in PR description, using title tickets: $TICKETS"
            fi
          else
            # For manual runs, just use title
            TICKETS="$TITLE_TICKETS"
            echo "Manual run, using title tickets: $TICKETS"
          fi

          JIRA_LINKS=""

          if [ -z "$TICKETS" ]; then
            echo "No BC tickets found, creating simple notification"
            NOTE="ðŸš€ **Release Deployed**\n\n"
            NOTE="Hash: ${HASH}\n"
            NOTE+="Date: ${DATE}\n"
            NOTE+="- ${TITLE}"

            echo "note<<EOF" >> $GITHUB_OUTPUT
            echo -e "$NOTE" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "Found BC tickets: $TICKETS"
            JIRA_LINKS=""
            for TICKET in $TICKETS; do
              SUMMARY=$(curl -s -u "$JIRA_API_EMAIL:$JIRA_API_TOKEN" \
                -H "Accept: application/json" \
                "$JIRA_BASE_URL/rest/api/2/issue/$TICKET" | jq -r '.fields.summary')

              LINK="- <$JIRA_BASE_URL/browse/$TICKET|$TICKET $SUMMARY>\n"
              JIRA_LINKS+="$LINK"
            done

            NOTE="ðŸš€ **Release Deployed**\n\n"
            NOTE="Hash: ${HASH}\n"
            NOTE+="Date: ${DATE}\n"
            NOTE+="$JIRA_LINKS"

            echo "note<<EOF" >> $GITHUB_OUTPUT
            echo -e "$NOTE" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Send to Slack
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": ${{ toJSON(steps.format_note.outputs.note) }}
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
